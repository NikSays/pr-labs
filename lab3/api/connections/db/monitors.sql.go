// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: monitors.sql

package db

import (
	"context"
)

const addMonitor = `-- name: AddMonitor :exec
INSERT INTO monitors (name, price_mdl, price_eur, warranty)
VALUES ($1, $2, $3, $4)
`

type AddMonitorParams struct {
	Name     string
	PriceMdl float64
	PriceEur float64
	Warranty int32
}

func (q *Queries) AddMonitor(ctx context.Context, arg AddMonitorParams) error {
	_, err := q.db.Exec(ctx, addMonitor,
		arg.Name,
		arg.PriceMdl,
		arg.PriceEur,
		arg.Warranty,
	)
	return err
}

const allMonitors = `-- name: AllMonitors :many
SELECT id, name, price_mdl, price_eur, warranty FROM monitors
ORDER BY id
LIMIT $1 OFFSET $2
`

type AllMonitorsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) AllMonitors(ctx context.Context, arg AllMonitorsParams) ([]Monitor, error) {
	rows, err := q.db.Query(ctx, allMonitors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monitor
	for rows.Next() {
		var i Monitor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PriceMdl,
			&i.PriceEur,
			&i.Warranty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteMonitor = `-- name: DeleteMonitor :exec
DELETE FROM monitors
WHERE id = $1
`

func (q *Queries) DeleteMonitor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMonitor, id)
	return err
}

const monitorByID = `-- name: MonitorByID :one
SELECT id, name, price_mdl, price_eur, warranty FROM monitors
WHERE id = $1
`

func (q *Queries) MonitorByID(ctx context.Context, id int32) (Monitor, error) {
	row := q.db.QueryRow(ctx, monitorByID, id)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PriceMdl,
		&i.PriceEur,
		&i.Warranty,
	)
	return i, err
}

const updateMonitor = `-- name: UpdateMonitor :exec
UPDATE monitors
SET name = $2, price_mdl = $3, price_eur = $4, warranty = $5
WHERE id = $1
`

type UpdateMonitorParams struct {
	ID       int32
	Name     string
	PriceMdl float64
	PriceEur float64
	Warranty int32
}

func (q *Queries) UpdateMonitor(ctx context.Context, arg UpdateMonitorParams) error {
	_, err := q.db.Exec(ctx, updateMonitor,
		arg.ID,
		arg.Name,
		arg.PriceMdl,
		arg.PriceEur,
		arg.Warranty,
	)
	return err
}

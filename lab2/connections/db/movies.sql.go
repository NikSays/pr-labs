// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: movies.sql

package db

import (
	"context"
)

const addMovie = `-- name: AddMovie :exec
INSERT INTO movies (name, description, rating)
VALUES ($1, $2, $3)
`

type AddMovieParams struct {
	Name        string
	Description string
	Rating      int32
}

func (q *Queries) AddMovie(ctx context.Context, arg AddMovieParams) error {
	_, err := q.db.Exec(ctx, addMovie, arg.Name, arg.Description, arg.Rating)
	return err
}

const allMovies = `-- name: AllMovies :many
SELECT id, name, description, rating FROM movies
ORDER BY id
LIMIT $1 OFFSET $2
`

type AllMoviesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) AllMovies(ctx context.Context, arg AllMoviesParams) ([]Movie, error) {
	rows, err := q.db.Query(ctx, allMovies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const movieByID = `-- name: MovieByID :one
SELECT id, name, description, rating FROM movies
WHERE id = $1
`

func (q *Queries) MovieByID(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRow(ctx, movieByID, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Rating,
	)
	return i, err
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE movies
SET name = $2, description = $3, rating = $4
WHERE id = $1
`

type UpdateMovieParams struct {
	ID          int32
	Name        string
	Description string
	Rating      int32
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.db.Exec(ctx, updateMovie,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Rating,
	)
	return err
}
